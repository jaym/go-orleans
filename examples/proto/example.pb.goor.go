// Code generated by protoc-gen-goor. DO NOT EDIT.
package examples

import (
	context "context"
	grain "github.com/jaym/go-orleans/grain"
	services "github.com/jaym/go-orleans/grain/services"
	silo "github.com/jaym/go-orleans/silo"
)

type ChirperGrainServices interface {
	CoreGrainServices() services.CoreGrainServices
	NotifyMessageObservers(ctx context.Context, observers []grain.RegisteredObserver, val *ChirpMessage) error
	ListMessageObservers(ctx context.Context) ([]grain.RegisteredObserver, error)
}

type impl_ChirperGrainServices struct {
	observerManager services.GrainObserverManager
	coreServices    services.CoreGrainServices
}

func (m *impl_ChirperGrainServices) CoreGrainServices() services.CoreGrainServices {
	return m.coreServices
}

func (m *impl_ChirperGrainServices) NotifyMessageObservers(ctx context.Context, observers []grain.RegisteredObserver, val *ChirpMessage) error {
	return m.observerManager.Notify(ctx, ChirperGrain_GrainDesc.Observables[0].Name, observers, val)
}

func (m *impl_ChirperGrainServices) ListMessageObservers(ctx context.Context) ([]grain.RegisteredObserver, error) {
	return m.observerManager.List(ctx, ChirperGrain_GrainDesc.Observables[0].Name)
}

type ChirperGrainActivator interface {
	Activate(ctx context.Context, address grain.Address, services ChirperGrainServices) (ChirperGrain, error)
}

func RegisterChirperGrainActivator(registrar silo.Registrar, activator ChirperGrainActivator) {
	registrar.Register(&ChirperGrain_GrainDesc, activator)
}

type ChirperGrain interface {
	grain.Addressable
	PublishMessage(ctx context.Context, req *PublishMessageRequest) (*PublishMessageResponse, error)
}

type ChirperGrainMessageObserver interface {
	grain.Addressable
	OnNotifyMessage(ctx context.Context, req *ChirpMessage) error
}

func CreateChirperGrainMessageObserver(ctx context.Context, s *silo.Silo, f func(ctx context.Context, req *ChirpMessage) error) (grain.Addressable, error) {
	address, err := s.CreateGrain(&_Chirper_Message_ObserverActivator{
		f: f,
	})
	if err != nil {
		return nil, err
	}
	return address, nil
}

type impl_ChirperGrainMessageObserver struct {
	grain.Address
	f func(ctx context.Context, req *ChirpMessage) error
}

func (g *impl_ChirperGrainMessageObserver) OnNotifyMessage(ctx context.Context, req *ChirpMessage) error {
	return g.f(ctx, req)
}

type _Chirper_Message_ObserverActivator struct {
	f func(ctx context.Context, req *ChirpMessage) error
}

func (a *_Chirper_Message_ObserverActivator) Activate(ctx context.Context, address grain.Address) (grain.Addressable, error) {
	return &impl_ChirperGrainMessageObserver{
		Address: address,
		f:       a.f,
	}, nil
}

type ChirperGrainRef interface {
	grain.Addressable
	ChirperGrain
	ObserveMessage(ctx context.Context, observer grain.Addressable, req *SubscribeRequest) error
}

var ChirperGrain_GrainDesc = silo.GrainDescription{
	GrainType: "ChirperGrain",
	Activation: silo.ActivationDesc{
		Handler: _ChirperGrain_Activate,
	},
	Methods: []silo.MethodDesc{
		{
			Name:    "PublishMessage",
			Handler: _ChirperGrain_PublishMessage_MethodHandler,
		},
	},
	Observables: []silo.ObservableDesc{
		{
			Name:    "Message",
			Handler: _ChirperGrain_Message_ObserverHandler,
		},
	},
}

func _ChirperGrain_Activate(activator interface{}, ctx context.Context, coreServices services.CoreGrainServices, observerManager services.GrainObserverManager, address grain.Address) (grain.Addressable, error) {
	grainServices := &impl_ChirperGrainServices{
		observerManager: observerManager,
		coreServices:    coreServices,
	}
	return activator.(ChirperGrainActivator).Activate(ctx, address, grainServices)
}

func _ChirperGrain_PublishMessage_MethodHandler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PublishMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}

	return srv.(ChirperGrain).PublishMessage(ctx, in)
}

func _ChirperGrain_Message_ObserverHandler(srv interface{}, ctx context.Context, dec func(interface{}) error) error {
	in := new(ChirpMessage)
	if err := dec(in); err != nil {
		return err
	}

	return srv.(ChirperGrainMessageObserver).OnNotifyMessage(ctx, in)
}

type _grainClient_ChirperGrain struct {
	grain.Address
	siloClient grain.SiloClient
}

func GetChirperGrain(siloClient grain.SiloClient, address grain.Address) ChirperGrainRef {
	return &_grainClient_ChirperGrain{
		Address:    address,
		siloClient: siloClient,
	}
}

func (c *_grainClient_ChirperGrain) PublishMessage(ctx context.Context, req *PublishMessageRequest) (*PublishMessageResponse, error) {
	f := c.siloClient.InvokeMethod(ctx, c.Address, ChirperGrain_GrainDesc.GrainType, ChirperGrain_GrainDesc.Methods[0].Name, req)
	resp, err := f.Await(ctx)
	if err != nil {
		return nil, err
	}
	out := new(PublishMessageResponse)
	if err := resp.Get(out); err != nil {
		return nil, err
	}
	return out, nil
}
func (c *_grainClient_ChirperGrain) ObserveMessage(ctx context.Context, observer grain.Addressable, req *SubscribeRequest) error {
	f := c.siloClient.RegisterObserver(ctx, observer.GetAddress(), c.GetAddress(), ChirperGrain_GrainDesc.Observables[0].Name, req)
	err := f.Await(ctx)
	if err != nil {
		return err
	}
	return nil
}
