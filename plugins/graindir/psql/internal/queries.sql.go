// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package internal

import (
	"context"
)

const deleteGrainActivation = `-- name: DeleteGrainActivation :exec
DELETE FROM grains
    WHERE
        node_name = $1 AND
        grain_type = COALESCE($2, grain_type) AND
        grain_id = COALESCE($3, grain_id)
`

type DeleteGrainActivationParams struct {
	NodeName  string
	GrainType string
	GrainID   string
}

func (q *Queries) DeleteGrainActivation(ctx context.Context, arg DeleteGrainActivationParams) error {
	_, err := q.db.Exec(ctx, deleteGrainActivation, arg.NodeName, arg.GrainType, arg.GrainID)
	return err
}

const insertGrain = `-- name: InsertGrain :exec
INSERT INTO grains (node_name, grain_type, grain_id) 
    VALUES($1,$2,$3)
`

type InsertGrainParams struct {
	NodeName  string
	GrainType string
	GrainID   string
}

func (q *Queries) InsertGrain(ctx context.Context, arg InsertGrainParams) error {
	_, err := q.db.Exec(ctx, insertGrain, arg.NodeName, arg.GrainType, arg.GrainID)
	return err
}

const lookupGrain = `-- name: LookupGrain :one
SELECT grains.id, grains.node_name, grains.grain_type, grains.grain_id FROM grains
    WHERE
        grain_type = $1 AND
        grain_id = $2
`

type LookupGrainParams struct {
	GrainType string
	GrainID   string
}

func (q *Queries) LookupGrain(ctx context.Context, arg LookupGrainParams) (Grain, error) {
	row := q.db.QueryRow(ctx, lookupGrain, arg.GrainType, arg.GrainID)
	var i Grain
	err := row.Scan(
		&i.ID,
		&i.NodeName,
		&i.GrainType,
		&i.GrainID,
	)
	return i, err
}
