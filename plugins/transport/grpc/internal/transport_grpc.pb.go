// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package internal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransportClient is the client API for Transport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransportClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (Transport_SendClient, error)
}

type transportClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportClient(cc grpc.ClientConnInterface) TransportClient {
	return &transportClient{cc}
}

func (c *transportClient) Send(ctx context.Context, opts ...grpc.CallOption) (Transport_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &Transport_ServiceDesc.Streams[0], "/goor.transport.grpc.Transport/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &transportSendClient{stream}
	return x, nil
}

type Transport_SendClient interface {
	Send(*TransportMessage) error
	CloseAndRecv() (*SendResponse, error)
	grpc.ClientStream
}

type transportSendClient struct {
	grpc.ClientStream
}

func (x *transportSendClient) Send(m *TransportMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transportSendClient) CloseAndRecv() (*SendResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransportServer is the server API for Transport service.
// All implementations must embed UnimplementedTransportServer
// for forward compatibility
type TransportServer interface {
	Send(Transport_SendServer) error
	mustEmbedUnimplementedTransportServer()
}

// UnimplementedTransportServer must be embedded to have forward compatible implementations.
type UnimplementedTransportServer struct {
}

func (UnimplementedTransportServer) Send(Transport_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedTransportServer) mustEmbedUnimplementedTransportServer() {}

// UnsafeTransportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportServer will
// result in compilation errors.
type UnsafeTransportServer interface {
	mustEmbedUnimplementedTransportServer()
}

func RegisterTransportServer(s grpc.ServiceRegistrar, srv TransportServer) {
	s.RegisterService(&Transport_ServiceDesc, srv)
}

func _Transport_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransportServer).Send(&transportSendServer{stream})
}

type Transport_SendServer interface {
	SendAndClose(*SendResponse) error
	Recv() (*TransportMessage, error)
	grpc.ServerStream
}

type transportSendServer struct {
	grpc.ServerStream
}

func (x *transportSendServer) SendAndClose(m *SendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transportSendServer) Recv() (*TransportMessage, error) {
	m := new(TransportMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Transport_ServiceDesc is the grpc.ServiceDesc for Transport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goor.transport.grpc.Transport",
	HandlerType: (*TransportServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _Transport_Send_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "transport.proto",
}
