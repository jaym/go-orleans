// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grain "github.com/jaym/go-orleans/grain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TimerService is an autogenerated mock type for the TimerService type
type TimerService struct {
	mock.Mock
}

// Cancel provides a mock function with given fields: ident, name
func (_m *TimerService) Cancel(ident grain.Identity, name string) bool {
	ret := _m.Called(ident, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(grain.Identity, string) bool); ok {
		r0 = rf(ident, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RegisterTicker provides a mock function with given fields: ident, name, d
func (_m *TimerService) RegisterTicker(ident grain.Identity, name string, d time.Duration) error {
	ret := _m.Called(ident, name, d)

	var r0 error
	if rf, ok := ret.Get(0).(func(grain.Identity, string, time.Duration) error); ok {
		r0 = rf(ident, name, d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterTimer provides a mock function with given fields: ident, name, d
func (_m *TimerService) RegisterTimer(ident grain.Identity, name string, d time.Duration) error {
	ret := _m.Called(ident, name, d)

	var r0 error
	if rf, ok := ret.Get(0).(func(grain.Identity, string, time.Duration) error); ok {
		r0 = rf(ident, name, d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *TimerService) Start() {
	_m.Called()
}

// Stop provides a mock function with given fields: _a0
func (_m *TimerService) Stop(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTimerService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTimerService creates a new instance of TimerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTimerService(t mockConstructorTestingTNewTimerService) *TimerService {
	mock := &TimerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
