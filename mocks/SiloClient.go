// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grain "github.com/jaym/go-orleans/grain"
	mock "github.com/stretchr/testify/mock"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

// SiloClient is an autogenerated mock type for the SiloClient type
type SiloClient struct {
	mock.Mock
}

// InvokeMethod provides a mock function with given fields: ctx, toIdentity, grainType, method, in
func (_m *SiloClient) InvokeMethod(ctx context.Context, toIdentity grain.Identity, grainType string, method string, in protoreflect.ProtoMessage) grain.InvokeMethodFuture {
	ret := _m.Called(ctx, toIdentity, grainType, method, in)

	var r0 grain.InvokeMethodFuture
	if rf, ok := ret.Get(0).(func(context.Context, grain.Identity, string, string, protoreflect.ProtoMessage) grain.InvokeMethodFuture); ok {
		r0 = rf(ctx, toIdentity, grainType, method, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grain.InvokeMethodFuture)
		}
	}

	return r0
}

// NotifyObservers provides a mock function with given fields: ctx, observableType, observableName, receiver, out
func (_m *SiloClient) NotifyObservers(ctx context.Context, observableType string, observableName string, receiver []grain.Identity, out protoreflect.ProtoMessage) error {
	ret := _m.Called(ctx, observableType, observableName, receiver, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []grain.Identity, protoreflect.ProtoMessage) error); ok {
		r0 = rf(ctx, observableType, observableName, receiver, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterObserver provides a mock function with given fields: ctx, observer, observable, name, in, opts
func (_m *SiloClient) RegisterObserver(ctx context.Context, observer grain.Identity, observable grain.Identity, name string, in protoreflect.ProtoMessage, opts ...grain.RegisterObserverOption) grain.RegisterObserverFuture {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, observer, observable, name, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 grain.RegisterObserverFuture
	if rf, ok := ret.Get(0).(func(context.Context, grain.Identity, grain.Identity, string, protoreflect.ProtoMessage, ...grain.RegisterObserverOption) grain.RegisterObserverFuture); ok {
		r0 = rf(ctx, observer, observable, name, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grain.RegisterObserverFuture)
		}
	}

	return r0
}

// UnsubscribeObserver provides a mock function with given fields: ctx, observer, observable, name
func (_m *SiloClient) UnsubscribeObserver(ctx context.Context, observer grain.Identity, observable grain.Identity, name string) grain.UnsubscribeObserverFuture {
	ret := _m.Called(ctx, observer, observable, name)

	var r0 grain.UnsubscribeObserverFuture
	if rf, ok := ret.Get(0).(func(context.Context, grain.Identity, grain.Identity, string) grain.UnsubscribeObserverFuture); ok {
		r0 = rf(ctx, observer, observable, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grain.UnsubscribeObserverFuture)
		}
	}

	return r0
}

type mockConstructorTestingTNewSiloClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewSiloClient creates a new instance of SiloClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSiloClient(t mockConstructorTestingTNewSiloClient) *SiloClient {
	mock := &SiloClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
